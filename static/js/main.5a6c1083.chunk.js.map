{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","pageCount","Math","ceil","pages","nextPage","prevPage","isFirstPage","isLastPage","className","cn","disabled","href","onClick","map","page","active","items","App","useState","countPerPage","setCountPerPage","setCurrentPage","firstVisibleItemIndex","lastItemIndex","lastVisibleItemIndex","length","visibleTtems","slice","id","onChange","event","Number","target","value","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCGIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAYC,KAAKC,KAAKN,EAAQC,GAC9BM,EAAQd,EAAW,EAAGW,GACtBI,EAAWN,EAAc,EACzBO,EAAWP,EAAc,EACzBQ,EAAcD,EAAW,EACzBE,EAAaH,EAAWJ,EAE9B,OACE,qBAAIQ,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAG,YAAa,CAC7BC,SAAUJ,IADZ,SAIE,mBACE,UAAQ,WACRE,UAAU,YACVG,KAAK,QACL,gBAAeL,EACfM,QAAS,WACFN,GACHP,EAAaM,IAPnB,oBAgBAF,EAAMU,KAAI,SAAAC,GAAI,OACZ,oBAEEN,UAAWC,IAAG,YAAa,CACzBM,OAAQjB,IAAgBgB,IAH5B,SAME,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMb,EAAae,IAJ9B,SAMGA,KAXEA,MAiBX,oBAAIN,UAAWC,IAAG,YAAa,CAC7BC,SAAUH,IADZ,SAIE,mBACE,UAAQ,WACRC,UAAU,YACVG,KAAK,QACL,gBAAeJ,EACfK,QAAS,WACFL,GACHR,EAAaK,IAPnB,wBC/DFY,EAAQ3B,EAAW,EAAG,IAEf4B,EAAgB,WAC3B,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOpB,EAAP,KAAoBuB,EAApB,KAEMC,GAAyBxB,EAAc,GAAKqB,EAC5CI,EAAgBD,EAAwBH,EACxCK,EAAuBD,EAAgBP,EAAMS,OAC/CT,EAAMS,OACNF,EAEEG,EAAeV,EAAMW,MAAML,EAAuBE,GAOxD,OACE,sBAAKhB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWV,EADX,mBACiCwB,EAAwB,EADzD,cACgEE,EADhE,eAC2FR,EAAMS,OADjG,OAIA,sBAAKjB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRoB,GAAG,kBACHpB,UAAU,eACVqB,SAnBW,SAACC,GACpBV,EAAgBW,OAAOD,EAAME,OAAOC,QACpCZ,EAAe,IAkBPY,MAAOd,EALT,UAOE,wBAAQc,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOC,QAAQ,kBAAkB1B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEZ,MAAOoB,EAAMS,OACb5B,QAASsB,EACTrB,YAAaA,EACbC,aAAcsB,IAGhB,6BACGK,EAAab,KAAI,SAAAsB,GAAI,OACpB,oBAAe,UAAQ,OAAvB,wBACWA,IADFA,YC3DnBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.5a6c1083.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import cn from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number,\n  perPage: number\n  currentPage: number,\n  onPageChange: (newPage: number) => void,\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const pageCount = Math.ceil(total / perPage);\n  const pages = getNumbers(1, pageCount);\n  const nextPage = currentPage + 1;\n  const prevPage = currentPage - 1;\n  const isFirstPage = prevPage < 1;\n  const isLastPage = nextPage > pageCount;\n\n  return (\n    <ul className=\"pagination\">\n      <li className={cn('page-item', {\n        disabled: isFirstPage,\n      })}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={isFirstPage}\n          onClick={() => {\n            if (!isFirstPage) {\n              onPageChange(prevPage);\n            }\n          }}\n        >\n          «\n        </a>\n      </li>\n\n      {\n        pages.map(page => (\n          <li\n            key={page}\n            className={cn('page-item', {\n              active: currentPage === page,\n            })}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${page}`}\n              onClick={() => onPageChange(page)}\n            >\n              {page}\n            </a>\n          </li>\n        ))\n      }\n\n      <li className={cn('page-item', {\n        disabled: isLastPage,\n      })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={isLastPage}\n          onClick={() => {\n            if (!isLastPage) {\n              onPageChange(nextPage);\n            }\n          }}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst items = getNumbers(1, 42);\n\nexport const App: React.FC = () => {\n  const [countPerPage, setCountPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const firstVisibleItemIndex = (currentPage - 1) * countPerPage;\n  const lastItemIndex = firstVisibleItemIndex + countPerPage;\n  const lastVisibleItemIndex = lastItemIndex > items.length\n    ? items.length\n    : lastItemIndex;\n\n  const visibleTtems = items.slice(firstVisibleItemIndex, lastVisibleItemIndex);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setCountPerPage(Number(event.target.value));\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstVisibleItemIndex + 1} - ${lastVisibleItemIndex} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={handleChange}\n            value={countPerPage}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={items.length}\n        perPage={countPerPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n\n      <ul>\n        {visibleTtems.map(item => (\n          <li key={item} data-cy=\"item\">\n            {`Item ${item}`}\n          </li>\n        ))}\n      </ul>\n\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}